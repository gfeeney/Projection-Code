place <- places[1]
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMRa <- readRDS(paste0(path2inputs, "NIMR/NIMRa.rds"))  # No migration
NIMRb <- readRDS(paste0(path2inputs, "NIMR/NIMRb.rds"))  # Migration raw
NIMRc <- readRDS(paste0(path2inputs, "NIMR/NIMRc.rds"))  # Migration adjusted
NIMRd <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Add decline
# PROJECTION 1: No migration
NIMR <- NIMRa
proj1LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj1LM, paste0(path2outputs, "projections/proj1LM.rds"))
proj1Totals <- t(sapply(proj1, get.projTotals))
proj1Totals <- sort.PlacesByGrowth(proj1Totals)
proj1Totals
write.csv(proj1Totals, paste0(path2outputs, "projections/proj1Totals.csv"))
ls()
rm(list=ls())
# PREPARATORY STEPS
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
place <- places[1]
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMRa <- readRDS(paste0(path2inputs, "NIMR/NIMRa.rds"))  # No migration
NIMRb <- readRDS(paste0(path2inputs, "NIMR/NIMRb.rds"))  # Migration raw
NIMRc <- readRDS(paste0(path2inputs, "NIMR/NIMRc.rds"))  # Migration adjusted
NIMRd <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Add decline
# PROJECTION 1: No migration
NIMR <- NIMRa
proj1LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj1LM, paste0(path2outputs, "projections/proj1LM.rds"))
proj1Totals <- t(sapply(proj1LM, get.projTotals))
proj1Totals <- sort.PlacesByGrowth(proj1Totals)
proj1Totals
write.csv(proj1Totals, paste0(path2outputs, "projections/proj1Totals.csv"))
# PROJECTION 2: Migration raw
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRb.rds"))
proj2LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj2LM, paste0(path2outputs, "projections/proj2LM.rds"))
proj2Totals <- t(sapply(proj2LM, get.projTotals))
proj2Totals <- sort.PlacesByGrowth(proj2Totals)
proj2Totals
write.csv(proj2Totals, paste0(path2outputs, "projections/proj2Totals.csv"))
# PROJECTION 3: Migration adjusted by LTCSRTMig census survival estimates
NIMR  <- readRDS(paste0(path2inputs, "NIMR/NIMRc.rds"))
proj3LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj3LM, paste0(path2outputs, "projections/proj3LM.rds"))
proj3Totals <- t(sapply(proj3LM, get.projTotals))
proj3Totals <- sort.PlacesByGrowth(proj3Totals)
proj3Totals
write.csv(proj3Totals, paste0(path2outputs, "projections/proj3Totals.csv"))
# PROJECTION 4: Migration adjusted with decline
NIMR  <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))
proj4LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj4LM, paste0(path2outputs, "projections/proj4LM.rds"))
proj4Totals <- t(sapply(proj4LM, get.projTotals))
proj4Totals <- sort.PlacesByGrowth(proj4Totals)
proj4Totals
write.csv(proj4Totals, paste0(path2outputs, "projections/proj4Totals.csv"))
rm(list = ls())
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
rm(list = ls())
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Note NIMRs!!!
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
for (i in 1:length(proj5LM)) {
place <- names(proj5LM)[i]
proj5LM.init[[i]] <-
initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
proj5LM[[i]] <- calculate.projection(proj5LM.init[[i]])
}
# National Projection
np <- proj5LM$Kenya
# National Projection
np <- proj5LM$Kenya
np
# National Projection
np <- proj5LM$Kenya
cols <- c("ASDin", "Deaths", "Births", "Survivors", "ASDout")
for (i in 1:length(np)) {
np[[i]][, cols] <- round(np[[i]][, cols], 0)
}
np  # These are the numbers we want subnational projections to be consistent with
length(proj5LM)
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
for (i in 1:length(proj5LM)) {
place <- names(proj5LM)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
proj5LM[[i]] <- calculate.projection(proj5LM.init[[i]])
}
# National Projection
np <- proj5LM$Kenya
cols <- c("ASDin", "Deaths", "Births", "Survivors", "ASDout")
for (i in 1:length(np)) {
np[[i]][, cols] <- round(np[[i]][, cols], 0)
}
np  # These are the numbers we want subnational projections to be consistent with
# PROJECTION 4: Migration adjusted with decline
NIMR  <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))
proj4LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj4LM, paste0(path2outputs, "projections/proj4LM.rds"))
proj4Totals <- t(sapply(proj4LM, get.projTotals))
proj4Totals
rm(list = ls())
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Note NIMRs!!!
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
for (i in 1:length(proj5LM)) {
place <- names(proj5LM)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
proj5LM[[i]] <- calculate.projection(proj5LM.init[[i]])
}
# National Projection
np <- proj5LM$Kenya  # national
cols <- c("ASDin", "Deaths", "Births", "Survivors", "ASDout")
for (i in 1:length(np)) {
np[[i]][, cols] <- round(np[[i]][, cols], 0)
}
np  # These are the numbers we want subnational projections to be consistent with
# Consistent subnational projections
snpi <- transpose.ListMatrix(proj5LM.init[2:48])  # This needs explaining
snp <- calculate.consistent.projections(np, snpi)
# Consistency parameters
rMatrixList <- vector(mode = "list", length = length(snp))
names(rMatrixList) <- pcycles
for (i in 1:length(snp)){
rMatrixList[[i]] <- attr(snp[[i]], "rMatrix")
}
lapply(rMatrixList, round, 3)
# Look at county population change
snp <- transpose.ListMatrix(snp)  # This needs explaining
# Consistent subnational projections
snpi <- transpose.ListMatrix(proj5LM.init[2:48])  # This needs explaining
snp <- calculate.consistent.projections(np, snpi)
# Look at county population change
snp <- transpose.ListMatrix(snp)  # This needs explaining
proj5Totals <- t(sapply(snp, get.projTotals))
proj5Totals <- sort.PlacesByGrowth(projTotals)
proj5Totals
# Look at county population change
snp <- transpose.ListMatrix(snp)  # This needs explaining
proj5Totals <- t(sapply(snp, get.projTotals))
proj5Totals <- sort.PlacesByGrowth(projTotals)
rm(list = ls())
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Note NIMRs!!!
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
for (i in 1:length(proj5LM)) {
place <- names(proj5LM)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
proj5LM[[i]] <- calculate.projection(proj5LM.init[[i]])
}
# National Projection I'M NOT SURE ABOUT THIS NOW, HOLD OFF
# np <- proj5LM$Kenya  # national
# cols <- c("ASDin", "Deaths", "Births", "Survivors", "ASDout")
# for (i in 1:length(np)) {
#   np[[i]][, cols] <- round(np[[i]][, cols], 0)
# }
# np  # These are the numbers we want subnational projections to be consistent with
# Consistent subnational projections
snpi <- transpose.ListMatrix(proj5LM.init[2:48])  # This needs explaining
snp <- calculate.consistent.projections(np, snpi)
# National Projection I'M NOT SURE ABOUT THIS NOW, HOLD OFF
np <- proj5LM$Kenya  # national
# Consistent subnational projections
snpi <- transpose.ListMatrix(proj5LM.init[2:48])  # This needs explaining
snp <- calculate.consistent.projections(np, snpi)
# Look at county population change
snp <- transpose.ListMatrix(snp)  # This needs explaining
proj5Totals <- t(sapply(snp, get.projTotals))
proj5Totals <- sort.PlacesByGrowth(proj5Totals)
proj5Totals
# PREPARATORY STEPS
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
place <- places[1]
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMRa <- readRDS(paste0(path2inputs, "NIMR/NIMRa.rds"))  # No migration
NIMRb <- readRDS(paste0(path2inputs, "NIMR/NIMRb.rds"))  # Migration raw
NIMRc <- readRDS(paste0(path2inputs, "NIMR/NIMRc.rds"))  # Migration adjusted
NIMRd <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Add decline
rm(list = ls())
metadata <- readRDS("metadata.rds")
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Note NIMRs!!!
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
for (i in 1:length(proj5LM)) {
place <- names(proj5LM)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
proj5LM[[i]] <- calculate.projection(proj5LM.init[[i]])
}
# National Projection I'M NOT SURE ABOUT THIS NOW, HOLD OFF
np <- proj5LM$Kenya  # national
# Consistent subnational projections
snpi <- transpose.ListMatrix(proj5LM.init[2:48])  # This needs explaining
snp <- calculate.consistent.projections(np, snpi)
length(snp)
length(snp[[1]])
snp <- transpose.ListMatrix(snp)
length(snp)
length(snp[[1]])
length(np)
np
length(snp)
length(np)
length(snp)
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))        # Note NIMRd!!!
proj5LM.init <- vector(mode = "list", length = length(places))  # 48x5 List Matrix
names(proj5LM.init) <- places
for (i in 1:length(proj5LM.init)) {
place <- names(proj5LM.init)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
}
# np = national projection ; snp = subnational projection
np <- calculate.projection(proj5LM.init[[1]])
snp1.init <- proj5ML.init[2:48]                            # 47x5 List Matrix
snp2.init <- transpose.ListMatrix(snp1.init)               # 5x47 List Matrix
rm(list(ls()))
rm(list(ls())
rm(list=ls())
rm(list=ls())
ls()
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))        # Note NIMRd!!!
proj5LM.init <- vector(mode = "list", length = length(places))  # 48x5 List Matrix
names(proj5LM.init) <- places
for (i in 1:length(proj5LM.init)) {
place <- names(proj5LM.init)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
}
# np = national projection ; snp = subnational projection
np <- calculate.projection(proj5LM.init[[1]])
snp1.init <- proj5LM.init[2:48]                            # 47x5 List Matrix
snp2.init <- transpose.ListMatrix(snp1.init)               # 5x47 List Matrix
snp2 <- calculate.consistent.projections(np, snpi)         # 5x47 List Matrix
snp2 <- calculate.consistent.projections(np, snp2.init)    # 5x47 List Matrix
snp2 <- transpose.ListMatrix(snp)                          # 47x5 List Matrix
snp2 <- transpose.ListMatrix(snp2)                         # 47x5 List Matrix
proj5LM <- vector(mode = "list", length = length(places))  # 48x5 List Matrix
names(proj5LM) <- places
proj5LM[[1]] <- np
proj5LM[2:48] <- snp2
saveRDS(paste0(path2outputs, "projections/proj5LM.rds"))
# Consistency parameters
rMatrixList <- vector(mode = "list", length = length(snp2))
names(rMatrixList) <- pcycles
for (i in 1:length(snp2)){
rMatrixList[[i]] <- attr(snp[[i]], "rMatrix")
}
for (i in 1:length(snp2)){
rMatrixList[[i]] <- attr(snp2[[i]], "rMatrix")
}
lapply(rMatrixList, round, 3)
rMatrixList
# Consistency parameters
rMatrixList <- vector(mode = "list", length = length(snp2))
names(rMatrixList) <- pcycles
rMatrixList
snp2
snp2[[5]]
source("D:/tmp/projection-code/R/projection.R")
source("D:/tmp/projection-code/R/projection.R")
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))        # Note NIMRd!!!
proj5LM.init <- vector(mode = "list", length = length(places))  # 48x5 List Matrix
names(proj5LM.init) <- places
for (i in 1:length(proj5LM.init)) {
place <- names(proj5LM.init)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
}
# np = national projection ; snp = subnational projection ; init = initialized
np <- calculate.projection(proj5LM.init[[1]])
snp1.init <- proj5LM.init[2:48]                            # 47x5 List Matrix
snp2.init <- transpose.ListMatrix(snp1.init)               # 5x47 List Matrix
snp2 <- calculate.consistent.projections(np, snp2.init)    # 5x47 List Matrix
length(snp2)
snp2[[1]]
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))        # Note NIMRd!!!
proj5LM.init <- vector(mode = "list", length = length(places))  # 48x5 List Matrix
names(proj5LM.init) <- places
for (i in 1:length(proj5LM.init)) {
place <- names(proj5LM.init)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
}
# np = national projection ; snp = subnational projection ; init = initialized
np <- calculate.projection(proj5LM.init[[1]])
snp1.init <- proj5LM.init[2:48]                            # 47x5 List Matrix
snp2.init <- transpose.ListMatrix(snp1.init)               # 5x47 List Matrix
snp2 <- calculate.consistent.projections(np, snp2.init)    # 5x47 List Matrix
snp1 <- transpose.ListMatrix(snp2)                         # 47x5 List Matrix
proj5LM <- vector(mode = "list", length = length(places))  # 48x5 List Matrix
names(proj5LM) <- places
proj5LM[[1]] <- np
proj5LM[2:48] <- snp2
saveRDS(paste0(path2outputs, "projections/proj5LM.rds"))
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))        # Note NIMRd!!!
proj5LM.init <- vector(mode = "list", length = length(places))  # 48x5 List Matrix
names(proj5LM.init) <- places
for (i in 1:length(proj5LM.init)) {
place <- names(proj5LM.init)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
}
# np = national projection ; snp = subnational projection ; init = initialized
np <- calculate.projection(proj5LM.init[[1]])
snp1.init <- proj5LM.init[2:48]                            # 47x5 List Matrix
snp2.init <- transpose.ListMatrix(snp1.init)               # 5x47 List Matrix
snp2 <- calculate.consistent.projections(np, snp2.init)    # 5x47 List Matrix
snp1 <- transpose.ListMatrix(snp2)                         # 47x5 List Matrix
proj5LM <- vector(mode = "list", length = length(places))  # 48x5 List Matrix
names(proj5LM) <- places
proj5LM[[1]] <- np
proj5LM[2:48] <- snp1
saveRDS(paste0(path2outputs, "projections/proj5LM.rds"))
saveRDS(proj5LM, paste0(path2outputs, "projections/proj5LM.rds"))
# Consistency parameters
rMatrixList <- vector(mode = "list", length = length(snp2))
names(rMatrixList) <- pcycles
for (i in 1:length(snp2)){
rMatrixList[[i]] <- attr(snp2[[i]], "rMatrix")
}
lapply(rMatrixList, round, 3)
# Look at county population change
proj5Totals <- t(sapply(proj5LM, get.projTotals))
proj5Totals <- sort.PlacesByGrowth(proj5Totals)
proj5Totals  # This is fine, we just don't have Kenya at top
write.csv(proj5Totals, paste0(path2outputs, "projections/proj5Totals.csv"))
source("D:/tmp/projection-code/R/projection.R")
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))        # Note NIMRd
proj5LM.init <- vector(mode = "list", length = length(places))  # 48x5 List Matrix
names(proj5LM.init) <- places
for (i in 1:length(proj5LM.init)) {
place <- names(proj5LM.init)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
}
# np = national projection ; snp = subnational projection ; init = initialized
np <- calculate.projection(proj5LM.init[[1]])
snp1.init <- proj5LM.init[2:48]                            # 47x5 List Matrix
snp2.init <- transpose.ListMatrix(snp1.init)               # 5x47 List Matrix
snp2 <- calculate.consistent.projections(np, snp2.init)    # 5x47 List Matrix
source("D:/tmp/projection-code/R/projection.R")
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))        # Note NIMRd
proj5LM.init <- vector(mode = "list", length = length(places))  # 48x5 List Matrix
names(proj5LM.init) <- places
for (i in 1:length(proj5LM.init)) {
place <- names(proj5LM.init)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
}
# np = national projection ; snp = subnational projection ; init = initialized
np <- calculate.projection(proj5LM.init[[1]])
snp1.init <- proj5LM.init[2:48]                            # 47x5 List Matrix
snp2.init <- transpose.ListMatrix(snp1.init)               # 5x47 List Matrix
snp2 <- calculate.consistent.projections(np, snp2.init)    # 5x47 List Matrix
snp1 <- transpose.ListMatrix(snp2)                         # 47x5 List Matrix
proj5LM <- vector(mode = "list", length = length(places))  # 48x5 List Matrix
names(proj5LM) <- places
proj5LM[[1]] <- np
proj5LM[2:48] <- snp1
saveRDS(proj5LM, paste0(path2outputs, "projections/proj5LM.rds"))
# Consistency parameters
rMatrixList <- vector(mode = "list", length = length(snp2))
names(rMatrixList) <- pcycles
for (i in 1:length(snp2)){
rMatrixList[[i]] <- attr(snp2[[i]], "rMatrix")
}
lapply(rMatrixList, round, 3)
# Look at county population change
proj5Totals <- t(sapply(proj5LM, get.projTotals))
proj5Totals <- sort.PlacesByGrowth(proj5Totals)
proj5Totals  # This is fine, we just don't have Kenya at top
write.csv(proj5Totals, paste0(path2outputs, "projections/proj5Totals.csv"))
