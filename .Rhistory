k <- rep(1, times = length(ad5) - 1)
NIM1x1[1:96, j] <- modified.midpoint.interpolation(ad5, k)$table2[, "y3+"]
ad5 <- NIM5x1[20 + 1:20, j]
k <- rep(1, times = length(ad5) - 1)
NIM1x1[96 + 1:96, j] <- modified.midpoint.interpolation(ad5, k)$table2[, "y3+"]
cat(paste0(" . ", j))
}
NIM1x1 <- round(NIM1x1, 0)
# View(NIM1x1)
# Impute zero values 95+ (jump between 94 and 95+ no good)
for (i in 1:length(subareas)) {
NIM1x1[c(96, 192), i] <- 0
}
# View(round(NIM1x1, 0))
saveRDS(NIM1x1, paste0(path2inputs, "NIMR/NIM1x1.rds"))
write.csv(NIM1x1, paste0(path2inputs, "NIMR/NIM1x1.csv"))
# STEP 3: Plot interpolated single year distributions
pathfile <- paste0(path2inputs, "NIMR/plots/NIM1x1.pdf")
pdf(file = pathfile, onefile = TRUE)
n1 <- (dim(NIM5x1)[1] / 2)
n2 <- (dim(NIM1x1)[1] / 2)
for (j in 1:dim(NIM1x1)[2]) {
county <- colnames(NIM1x1)[j]
sex <- "female"
y <- NIM1x1[1:(n2 - 1), j]  # Do not plot oeg
x <- 1:length(y) - 0.5
plot(x, y, xlim = c(0, 100))
lines(x, y)
lines(c(0, 100), c(0, 0))
y <- NIM5x1[1:(n1 - 1), j] / 5
x <- 5 * 1:length(y) - 2.5
points(x, y, cex = 2, pch = 16, col = gray.colors(1))
text(80, mean(y), paste(j, county, sex))
sex <- "male"
y <- NIM1x1[n2 + 1:(n2 - 1), j]
x <- 1:length(y) - 0.5
plot(x, y, xlim = c(0, 100))
lines(x, y)
lines(c(0, 100), c(0, 0))
y <- NIM5x1[n1 + 1:(n1 - 1), j] / 5  # Do not plot oeg
x <- 5 * 1:length(y) - 2.5
points(x, y, cex = 2, pch = 16, col = gray.colors(1))
text(80, mean(y), paste(j, county, sex))
}
dev.off()
# Now study the plots!
# Now study the plots!
# Now study the plots!
# Now study the plots!
# Now study the plots!
# Now study the plots!
# Now study the plots!
metadata <- readRDS("metadata.rds")
path2inputs <- metadata$paths$path2inputs
source(paste0(metadata$paths$path2R, "projection.R"))
# STEP 1: Identify net out-migration counties and net in-migration counties
# Calculate total net migrants for each county
NIM <- readRDS(paste0(path2inputs, "NIMR/NIM5x1.rds"))
NIMtotal <- apply(NIM, 2, sum)
NIMtotal
# Net out-migration counties
countiesOUT <- names(NIMtotal[NIMtotal < 0])
countiesOUT
length(countiesOUT)
saveRDS(countiesOUT, paste0(path2inputs, "NIMR/countiesOUT.rds"))
# Net in-migration counties
countiesIN <- names(NIMtotal[NIMtotal > 0])
countiesIN
length(countiesIN)
saveRDS(countiesIN, paste0(path2inputs, "NIMR/countiesIN.rds"))
# STEP 2: Calculate total female and male net migrants in out-migration counties
# and in-migration counties
NIMsc <- matrix(0, nrow = 2, ncol = 47)  # sc=BY SEX AND COUNTYBy sex and county
rownames(NIMsc) <- c("Female", "Male")
colnames(NIMsc) <- colnames(NIM)
NIMsc[1, ] <- apply(NIM[1:20, ], 2, sum)
NIMsc[2, ] <- apply(NIM[21:40, ], 2, sum)
NIMout <- apply(NIMsc[, countiesOUT], 1, sum)
NIMin <- apply(NIMsc[, countiesIN], 1, sum)
NIM1yr <- cbind(NIMout, NIMin)
NIM1yr
# STEP 3: Create corresponding matrix from LTCSRMig spreadsheets applied
# to 2009 and 2019 age-sex distributions
oeg.out <- 80
POP <- readRDS(paste0(path2inputs, "BaseASD/census2019asd5.rds"))
POP2019 <- reducePOP(POP, oeg.out)
POP <- readRDS(paste0(path2inputs, "BaseASD/census2009asd5.rds"))
POP2009 <- reducePOP(POP, oeg.out)
# Calculate aggregate age-sex distributions for NetOut and NetIn counties
POP2009out <- apply(POP2009[, countiesOUT], 1, sum)
POP2019out <- apply(POP2019[, countiesOUT], 1, sum)
POP2009in <- apply(POP2009[, countiesIN], 1, sum)
POP2019in <- apply(POP2019[, countiesIN], 1, sum)
LTCSRMigIn <- cbind(POP2009[, 1], POP2019[, 1],
POP2009out , POP2019out, POP2009in, POP2019in)
colnames(LTCSRMigIn)[1:2] <- c("POP2009tot", "POP2019tot")
LTCSRMigIn
write.csv(LTCSRMigIn, paste0(path2inputs, "NIMR/LTCSRMigInputs.csv"))
# STEP 3B: Estimate net migration using LTCSRMig spreadsheets for females and
# males for out-migration counties and in-migration counties, enter results
LTCSRMig <- NIM1yr
LTCSRMig[, ] <- 0
LTCSRMig[1, ] <- c(-151948, 126785)
LTCSRMig[2, ] <- c(-143151, 130201)
LTCSRMig
# STEP 4: Calculate adjustment factors
AdjFac <- round(LTCSRMig / NIM1yr, 3)
AdjFac
saveRDS(AdjFac, paste0(path2inputs, "NIMR/AdjFac.rds"))
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
ASDrows <- metadata$age$ASDrows
subareas <- metadata$place$subareas
path2inputs <- metadata$paths$path2inputs
# Calculate NIM5x5 directly from census 1 year ago numbers
NIM1x1 <- readRDS(paste0(path2inputs, "NIMR/NIM1x1.rds"))
NIM5x5 <- calculate.NIM5x5(NIM1x1, md = metadata)
ASD5 <- readRDS(paste0(path2inputs, "BaseASD/census2019asd5.rds"))
NIMR5x5 <- NIM5x5 / ASD5[, -1]  # 1st column of ASD5 is Kenya
NIMR5x5 <- round(NIMR5x5, 3)
# View(NIMR5x5)  # Rising rates over age 65 unacceptable
NIMR5x5 <- impute.NIMR5x5.65plus(NIMR5x5, Fac = 0.4)
NIMR5x5 <- round(NIMR5x5, 4)  # Some rates < -1
NIMR5x5[NIMR5x5 < -1] <- -1  # Replace any cells < -1 by -1
# View(NIMR5x5)
write.csv(NIMR5x5, paste0(path2inputs, "NIMR/NIMR5x5.csv"))
# ASSUMPTION B
NIMRb <- calculate.NIMR(NIMR5x5, md = metadata)
saveRDS(NIMRb, paste0(path2inputs, "NIMR/NIMRb.rds"))
# ASSUMPTION A
NIMRa <- lapply(NIMRb, function(x){x[ , ] <- 0; return(x)})
saveRDS(NIMRa, paste0(path2inputs, "NIMR/NIMRa.rds"))
# ASSUMPTION C
# NIMRc Adjust NIM5x5 by LTSCRMig adjustment factors and recalculate NIMR
AdjFac <- readRDS(paste0(path2inputs, "NIMR/AdjFac.rds"))
countiesOUT <- readRDS(paste0(path2inputs, "NIMR/countiesOUT.rds"))
countiesIN <- readRDS(paste0(path2inputs, "NIMR/countiesIN.rds"))
NIM5x5[1:20, countiesOUT] <-
NIM5x5[1:20, countiesOUT] * AdjFac["Female", "NIMout"]
NIM5x5[20 + 1:20, countiesOUT] <-
NIM5x5[20 + 1:20, countiesOUT] * AdjFac["Male",   "NIMout"]
NIM5x5[1:20, countiesIN] <-
NIM5x5[1:20, countiesIN] * AdjFac["Female", "NIMin"]
NIM5x5[20 + 1:20, countiesIN]  <-
NIM5x5[20 + 1:20, countiesIN] * AdjFac["Male", "NIMin"]
ASD5 <- readRDS(paste0(path2inputs, "BaseASD/census2019asd5.rds"))
NIMR5x5 <- NIM5x5 / ASD5[, -1]  # 1st column of ASD5 is Kenya
# View(round(NIMR5x5, 1))  # Rising rates over age 65 unacceptable
NIMR5x5 <- impute.NIMR5x5.65plus(NIMR5x5, Fac = 0.4)
NIMR5x5 <- round(NIMR5x5, 4)
# View(NIMR5x5)
NIMRc <- calculate.NIMR(NIMR5x5, md = metadata)
saveRDS(NIMRc, paste0(path2inputs, "NIMR/NIMRc.rds"))
# ASSUMPTION D
# Introduce trend to reverse 2009-2019 increase
# Crude Net Migration Rate doubled between 2009 and 2019
# Reverse this increase between pcycle1 and pcycle3
introduce.trend <- function(NIMRi) {
# NIMRi is component of NIMR
NIMRi.out <- NIMRi
NIMRi.out[, 2] <- NIMRi[, 1] * sqrt(0.5)
NIMRi.out[, 3:5] <- NIMRi[, 3:5] * 0.5
return(NIMRi.out)
}
NIMRd <- lapply(NIMRc, introduce.trend)
NIMRd <- lapply(NIMRd, round, 4)
# View(NIMRd[[2]])
saveRDS(NIMRd, paste0(path2inputs, "NIMR/NIMRd.rds"))
# PREPARATORY STEPS
metadata <- readRDS("metadata.rds")
source(paste0(path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
place <- places[1]
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMRa <- readRDS(paste0(path2inputs, "NIMR/NIMRa.rds"))  # No migration
NIMRb <- readRDS(paste0(path2inputs, "NIMR/NIMRb.rds"))  # Migration raw
NIMRc <- readRDS(paste0(path2inputs, "NIMR/NIMRc.rds"))  # Migration adjusted
NIMRd <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Add decline
# PROJECTION 1: No migration
NIMR <- NIMRa
proj1 <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj1, paste0(path2outputs, "projections/proj1.rds"))
proj1Totals <- t(sapply(proj1, get.projTotals))
proj1Totals <- sort.PlacesByGrowth(proj1Totals)
proj1Totals
write.csv(proj1Totals, paste0(path2outputs, "projections/proj1Totals.csv"))
# PROJECTION 2: Migration raw
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRb.rds"))
proj2 <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj2, paste0(path2outputs, "projections/proj2.rds"))
proj2Totals <- t(sapply(proj2, get.projTotals))
proj2Totals <- sort.PlacesByGrowth(proj2Totals)
proj2Totals
write.csv(proj2Totals, paste0(path2outputs, "projections/proj2Totals.csv"))
# PROJECTION 3: Migration adjusted by LTCSRTMig census survival estimates
NIMR  <- readRDS(paste0(path2inputs, "NIMR/NIMRc.rds"))
proj3 <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj3, paste0(path2outputs, "projections/proj3.rds"))
proj3Totals <- t(sapply(proj3, get.projTotals))
proj3Totals <- sort.PlacesByGrowth(proj3Totals)
proj3Totals
write.csv(proj3Totals, paste0(path2outputs, "projections/proj3Totals.csv"))
# PROJECTION 4: Migration adjusted with decline
NIMR  <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))
proj4 <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj4, paste0(path2outputs, "projections/proj4.rds"))
proj4Totals <- t(sapply(proj4, get.projTotals))
proj4Totals <- sort.PlacesByGrowth(proj4Totals)
proj4Totals
write.csv(proj4Totals, paste0(path2outputs, "projections/proj4Totals.csv"))
rm(list = ls())
metadata <- readRDS("metadata.rds")
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
source(paste0(path2R, "projection.R"))
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))
projections <- vector(mode = "list", length = length(places))
names(projections) <- places
projections.init <- projections
for (i in 1:length(projections)) {
place <- names(projections)[i]
projections.init[[i]] <-
initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
projections[[i]] <- calculate.projection(projections.init[[i]])
}
# National Projection
np <- projections$Kenya
cols <- c("ASDin", "Deaths", "Births", "Survivors", "ASDout")
for (i in 1:length(np)) {
np[[i]][, cols] <- round(np[[i]][, cols], 0)
}
np  # These are the numbers we want subnational projections to be consistent with
# Consistent subnational projections
snpi <- transpose.ListMatrix(projections.init[2:48])  # This needs explaining
snp <- calculate.consistent.projections(np, snpi)
# Consistency parameters
rMatrixList <- vector(mode = "list", length = length(snp))
names(rMatrixList) <- pcycles
for (i in 1:length(snp)){
rMatrixList[[i]] <- attr(snp[[i]], "rMatrix")
}
lapply(rMatrixList, round, 3)
# Look at county population change
snp <- transpose.ListMatrix(snp)  # This needs explaining
projectionTotals <- t(sapply(snp, get.projTotals))
projectionTotals <- sort.PlacesByGrowth(projectionTotals)
projectionTotals
write.csv(projectionTotals, paste0(path2outputs, "projections/projectionTotals.csv"))
# Look at components of change for counties
get.ComponentsMatrix(snp$Kwale)
get.ComponentsMatrix(snp$Kilifi)
get.ComponentsMatrix(snp$`Tana River`)
get.ComponentsMatrix(snp$`Taita-Taveta`)
get.ComponentsMatrix(snp$Garissa)
get.ComponentsMatrix(snp$Baringo)
get.ComponentsMatrix(snp$Vihiga)
dir()
# PREPARATORY STEPS
metadata <- readRDS("metadata.rds")
source(paste0(path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
rm(list=ls())
ls()
# PREPARATORY STEPS
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
place <- places[1]
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMRa <- readRDS(paste0(path2inputs, "NIMR/NIMRa.rds"))  # No migration
NIMRb <- readRDS(paste0(path2inputs, "NIMR/NIMRb.rds"))  # Migration raw
NIMRc <- readRDS(paste0(path2inputs, "NIMR/NIMRc.rds"))  # Migration adjusted
NIMRd <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Add decline
# PROJECTION 1: No migration
NIMR <- NIMRa
proj1LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj1LM, paste0(path2outputs, "projections/proj1LM.rds"))
proj1Totals <- t(sapply(proj1, get.projTotals))
proj1Totals <- sort.PlacesByGrowth(proj1Totals)
proj1Totals
write.csv(proj1Totals, paste0(path2outputs, "projections/proj1Totals.csv"))
ls()
rm(list=ls())
# PREPARATORY STEPS
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
place <- places[1]
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMRa <- readRDS(paste0(path2inputs, "NIMR/NIMRa.rds"))  # No migration
NIMRb <- readRDS(paste0(path2inputs, "NIMR/NIMRb.rds"))  # Migration raw
NIMRc <- readRDS(paste0(path2inputs, "NIMR/NIMRc.rds"))  # Migration adjusted
NIMRd <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Add decline
# PROJECTION 1: No migration
NIMR <- NIMRa
proj1LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj1LM, paste0(path2outputs, "projections/proj1LM.rds"))
proj1Totals <- t(sapply(proj1LM, get.projTotals))
proj1Totals <- sort.PlacesByGrowth(proj1Totals)
proj1Totals
write.csv(proj1Totals, paste0(path2outputs, "projections/proj1Totals.csv"))
# PROJECTION 2: Migration raw
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRb.rds"))
proj2LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj2LM, paste0(path2outputs, "projections/proj2LM.rds"))
proj2Totals <- t(sapply(proj2LM, get.projTotals))
proj2Totals <- sort.PlacesByGrowth(proj2Totals)
proj2Totals
write.csv(proj2Totals, paste0(path2outputs, "projections/proj2Totals.csv"))
# PROJECTION 3: Migration adjusted by LTCSRTMig census survival estimates
NIMR  <- readRDS(paste0(path2inputs, "NIMR/NIMRc.rds"))
proj3LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj3LM, paste0(path2outputs, "projections/proj3LM.rds"))
proj3Totals <- t(sapply(proj3LM, get.projTotals))
proj3Totals <- sort.PlacesByGrowth(proj3Totals)
proj3Totals
write.csv(proj3Totals, paste0(path2outputs, "projections/proj3Totals.csv"))
# PROJECTION 4: Migration adjusted with decline
NIMR  <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))
proj4LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj4LM, paste0(path2outputs, "projections/proj4LM.rds"))
proj4Totals <- t(sapply(proj4LM, get.projTotals))
proj4Totals <- sort.PlacesByGrowth(proj4Totals)
proj4Totals
write.csv(proj4Totals, paste0(path2outputs, "projections/proj4Totals.csv"))
rm(list = ls())
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
rm(list = ls())
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Note NIMRs!!!
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
for (i in 1:length(proj5LM)) {
place <- names(proj5LM)[i]
proj5LM.init[[i]] <-
initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
proj5LM[[i]] <- calculate.projection(proj5LM.init[[i]])
}
# National Projection
np <- proj5LM$Kenya
# National Projection
np <- proj5LM$Kenya
np
# National Projection
np <- proj5LM$Kenya
cols <- c("ASDin", "Deaths", "Births", "Survivors", "ASDout")
for (i in 1:length(np)) {
np[[i]][, cols] <- round(np[[i]][, cols], 0)
}
np  # These are the numbers we want subnational projections to be consistent with
length(proj5LM)
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
for (i in 1:length(proj5LM)) {
place <- names(proj5LM)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
proj5LM[[i]] <- calculate.projection(proj5LM.init[[i]])
}
# National Projection
np <- proj5LM$Kenya
cols <- c("ASDin", "Deaths", "Births", "Survivors", "ASDout")
for (i in 1:length(np)) {
np[[i]][, cols] <- round(np[[i]][, cols], 0)
}
np  # These are the numbers we want subnational projections to be consistent with
# PROJECTION 4: Migration adjusted with decline
NIMR  <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))
proj4LM <- calculate.projections(places, BaseASD, nLx, ASBR, NIMR, md = metadata)
saveRDS(proj4LM, paste0(path2outputs, "projections/proj4LM.rds"))
proj4Totals <- t(sapply(proj4LM, get.projTotals))
proj4Totals
rm(list = ls())
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Note NIMRs!!!
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
for (i in 1:length(proj5LM)) {
place <- names(proj5LM)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
proj5LM[[i]] <- calculate.projection(proj5LM.init[[i]])
}
# National Projection
np <- proj5LM$Kenya  # national
cols <- c("ASDin", "Deaths", "Births", "Survivors", "ASDout")
for (i in 1:length(np)) {
np[[i]][, cols] <- round(np[[i]][, cols], 0)
}
np  # These are the numbers we want subnational projections to be consistent with
# Consistent subnational projections
snpi <- transpose.ListMatrix(proj5LM.init[2:48])  # This needs explaining
snp <- calculate.consistent.projections(np, snpi)
# Consistency parameters
rMatrixList <- vector(mode = "list", length = length(snp))
names(rMatrixList) <- pcycles
for (i in 1:length(snp)){
rMatrixList[[i]] <- attr(snp[[i]], "rMatrix")
}
lapply(rMatrixList, round, 3)
# Look at county population change
snp <- transpose.ListMatrix(snp)  # This needs explaining
# Consistent subnational projections
snpi <- transpose.ListMatrix(proj5LM.init[2:48])  # This needs explaining
snp <- calculate.consistent.projections(np, snpi)
# Look at county population change
snp <- transpose.ListMatrix(snp)  # This needs explaining
proj5Totals <- t(sapply(snp, get.projTotals))
proj5Totals <- sort.PlacesByGrowth(projTotals)
proj5Totals
# Look at county population change
snp <- transpose.ListMatrix(snp)  # This needs explaining
proj5Totals <- t(sapply(snp, get.projTotals))
proj5Totals <- sort.PlacesByGrowth(projTotals)
rm(list = ls())
metadata <- readRDS("metadata.rds")
source(paste0(metadata$paths$path2R, "projection.R"))
path2inputs <- metadata$paths$path2inputs
path2outputs <- metadata$paths$path2outputs
path2R <- metadata$paths$path2R
places  <- metadata$place$places
pcycles <- metadata$time$pcycles
BaseASD <- readRDS(paste0(path2inputs, "BaseASD/BaseASD.rds"))  # View(BaseASD)
nLx     <- readRDS(paste0(path2inputs, "nLx/nLx.rds"))
ASBR    <- readRDS(paste0(path2inputs, "ASBR/ASBR.rds"))
NIMR   <- readRDS(paste0(path2inputs, "NIMR/NIMRd.rds"))  # Note NIMRs!!!
proj5LM <- vector(mode = "list", length = length(places))
names(proj5LM) <- places
proj5LM.init <- proj5LM
for (i in 1:length(proj5LM)) {
place <- names(proj5LM)[i]
proj5LM.init[[i]] <- initialize.projection.pframes(place, BaseASD, nLx, ASBR, NIMR)
proj5LM[[i]] <- calculate.projection(proj5LM.init[[i]])
}
# National Projection I'M NOT SURE ABOUT THIS NOW, HOLD OFF
# np <- proj5LM$Kenya  # national
# cols <- c("ASDin", "Deaths", "Births", "Survivors", "ASDout")
# for (i in 1:length(np)) {
#   np[[i]][, cols] <- round(np[[i]][, cols], 0)
# }
# np  # These are the numbers we want subnational projections to be consistent with
# Consistent subnational projections
snpi <- transpose.ListMatrix(proj5LM.init[2:48])  # This needs explaining
snp <- calculate.consistent.projections(np, snpi)
# National Projection I'M NOT SURE ABOUT THIS NOW, HOLD OFF
np <- proj5LM$Kenya  # national
# Consistent subnational projections
snpi <- transpose.ListMatrix(proj5LM.init[2:48])  # This needs explaining
snp <- calculate.consistent.projections(np, snpi)
# Look at county population change
snp <- transpose.ListMatrix(snp)  # This needs explaining
proj5Totals <- t(sapply(snp, get.projTotals))
proj5Totals <- sort.PlacesByGrowth(proj5Totals)
proj5Totals
